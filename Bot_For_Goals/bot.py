from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler,ContextTypes
from config import TOKEN
from database import init_db, add_goal, add_task

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
init_db()

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤–µ—Ç! üéØ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ü–µ–ª–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
         "\n"
        "‚ûï <b>/add_goal   -   –î–æ–±–∞–≤–∏—Ç—å —Ü–µ–ª—å </b>\n"
        "\n"
        "üìã <b>/add_task   -    –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∑–∞–¥–∞—á—É –∫ —Ü–µ–ª–∏</b>\n",
        parse_mode='HTML'
    )

# –ö–æ–º–∞–Ω–¥–∞ /add_goal
async def add_goal_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        description = context.args[0]
        description_1 = context.args[1]
        deadline = context.args[2]
        add_goal(description, deadline)
        await update.message.reply_text(
            f"üéØ <b> –¶–µ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞! </b>\n"
            "\n"
            f"üîπ<b> **–û–ø–∏—Å–∞–Ω–∏–µ:** </b> {description_1}\n"
            "\n"
            f"üìÖ <b> **–î–µ–¥–ª–∞–π–Ω:**</b> {deadline}\n"
            "\n"
            "<b> –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –µ—ë —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /view_goals.</b>",
            parse_mode='HTML'
        )
    except:
        await update.message.reply_text(
            "üìú <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏:</b>\n"
            "\n"
            "‚ûï <b>/add_goal   '–û–ø–∏—Å–∞–Ω–∏–µ —Ü–µ–ª–∏'   'YYYY-MM-DD'</b>\n"
            "\n"
            "<b><i>üí° –ü—Ä–∏–º–µ—Ä:</i></b>\n"
            "     <code>  <b>/add_goal    '–ò–∑—É—á–∏—Ç—å Python'    '2024-12-31'</b></code>",
            parse_mode='HTML'
        )

# –ö–æ–º–∞–Ω–¥–∞ /add_task
async def add_task_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
        description = ' '.join(context.args[0:-2])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å–ª–æ–≤–∞, –∫—Ä–æ–º–µ –¥–∞—Ç—ã
        deadline = context.args[-2]  # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç - –¥–µ–¥–ª–∞–π–Ω
        goal_id = int(context.args[-1])  # ID —Ü–µ–ª–∏

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        add_task(goal_id, description, deadline)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await update.message.reply_text(
            f"‚úÖ <b>–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n" 
            f"üîπ <b>–¶–µ–ª—å goal_id:</b> <code>{goal_id}</code>\n"
             "\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:</b> {description}\n"
             "\n"
            f"üìÖ <b>–î–µ–¥–ª–∞–π–Ω:</b> {deadline}\n\n"
            
            f"üí° <i>–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å –ø–æ–º–æ—â—å—é /view_tasks!</i>",
            parse_mode='HTML'  # –í–∫–ª—é—á–∞–µ–º HTML-—Ä–∞–∑–º–µ—Ç–∫—É
        )
    except Exception as e:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        await update.message.reply_text(
            "üìú <b>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:</b>\n"
            "\n"
            "üìã <b>/add_task  '–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'   YYYY-MM-DD   goal_id  </b>\n\n"
            "<b><i>–ü—Ä–∏–º–µ—Ä:</i></b>\n"
            "<code><b>/add_task '–ü—Ä–æ—á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥—É –ø–æ Python' 2024-12-31  1 </b></code>",
            parse_mode='HTML'
        )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(TOKEN).build()

app.add_handler(CommandHandler("start", start))
app.add_handler(CommandHandler("add_goal", add_goal_command))
app.add_handler(CommandHandler("add_task", add_task_command))


print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
app.run_polling()
